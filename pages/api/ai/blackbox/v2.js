import axios from "axios";
class BlackboxAI {
  constructor() {
    this.apiUrl = "https://api.blackbox.ai/api/chat";
    this.headers = {
      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
      Accept: "*/*",
      "Accept-Language": "en-US,en;q=0.5",
      "Accept-Encoding": "gzip, deflate, br",
      Referer: "https://api.blackbox.ai/",
      "Content-Type": "application/json",
      Origin: "https://api.blackbox.ai",
      DNT: "1",
      "Sec-GPC": "1",
      "Alt-Used": "api.blackbox.ai",
      Connection: "keep-alive"
    };
    this.defaultModel = "blackboxai";
  }
  async chat(messages, model = this.defaultModel, agentMode = {}, clickedForceWebSearch = false) {
    const payload = {
      messages: messages,
      id: Date.now().toString(),
      previewToken: null,
      userId: null,
      codeModelMode: true,
      agentMode: agentMode || {},
      trendingAgentMode: {},
      isMicMode: false,
      userSystemPrompt: null,
      maxTokens: 1024,
      playgroundTopP: .9,
      playgroundTemperature: .5,
      isChromeExt: false,
      githubToken: null,
      clickedAnswer2: false,
      clickedAnswer3: false,
      clickedForceWebSearch: clickedForceWebSearch,
      visitFromDelta: false,
      mobileClient: false,
      userSelectedModel: model
    };
    try {
      const response = await axios.post(this.apiUrl, payload, {
        headers: this.headers
      });
      return response.data.replace(/\n*generated by blackbox\.ai, try unlimited chat https:\/\/www\.blackbox\.ai\/?\n*/gi, "");
    } catch (error) {
      throw new Error("Error communicating with Blackbox.ai: " + error.message);
    }
  }
  async countTokens(text) {
    const payload = {
      text: text
    };
    try {
      const response = await axios.post("https://api.blackbox.ai/api/token-count", payload, {
        headers: this.headers
      });
      return response.data.tokenCount;
    } catch (error) {
      throw new Error("Error communicating with Blackbox.ai: " + error.message);
    }
  }
}
export default async function handler(req, res) {
  if (req.method !== "GET") {
    return res.status(405).json({
      error: "Method not allowed"
    });
  }
  const {
    prompt,
    model,
    action,
    web,
    agentId,
    agentName
  } = req.method === "GET" ? req.query : req.body;
  if (!prompt) {
    return res.status(400).json({
      error: "Prompt is required"
    });
  }
  const selectedAction = action || "chat";
  const selectedModel = model || "blackboxai";
  const agentMode = agentId && agentName ? {
    id: agentId,
    name: agentName
  } : {};
  const clickedForceWebSearch = web === "true";
  const blackboxAI = new BlackboxAI();
  try {
    if (selectedAction === "countTokens") {
      const tokenCount = await blackboxAI.countTokens(prompt);
      return res.status(200).json({
        tokenCount: tokenCount
      });
    }
    if (selectedAction === "chat") {
      const messages = [{
        role: "user",
        content: prompt
      }];
      const result = await blackboxAI.chat(messages, selectedModel, agentMode, clickedForceWebSearch);
      return res.status(200).json({
        result: result
      });
    }
    return res.status(400).json({
      error: "Invalid query parameters"
    });
  } catch (error) {
    return res.status(500).json({
      error: error.message
    });
  }
}